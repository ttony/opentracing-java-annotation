/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.opentracing.contrib;

import io.opentracing.mock.MockSpan;
import io.opentracing.mock.MockTracer;
import io.opentracing.util.GlobalTracer;
import org.junit.After;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.List;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

public class LibraryTest {

    private static MockTracer tracer;

    @BeforeClass
    public static void init() {
        tracer = new MockTracer();
        GlobalTracer.registerIfAbsent(tracer);
    }

    @After
    public void tearDown() {
        tracer.reset();
    }

    @Test
    public void testWithNoArgs() {
        new ClassWithNewSpanAnnotation().withEmptyArgs();
    }

    @Test
    public void testWithSpanArgs() {
        new ClassWithNewSpanAnnotation().withSpanArgs(null);
    }


    @Test
    public void testWithSpanArgsOnExtraLogic() {

        // When
        new ClassWithNewSpanAnnotation().withExtraLogicOnSpanArgs(null);

        // Then
        List<MockSpan> mockSpans = tracer.finishedSpans();
        assertThat(mockSpans.size(), is(1));

        MockSpan mockSpan = mockSpans.get(0);
        assertThat(mockSpan.operationName(), is("withExtraLogicOnSpanArgs"));
        assertThat(mockSpan.logEntries().size(), is(1));
        assertThat(mockSpan.logEntries().get(0).fields().get("event"), is("this is event log"));
    }

    @Test
    public void testNewSpanCreation() {

        // When
        new ClassWithNewSpanAnnotation().withEmptyArgs();

        // Then
        List<MockSpan> mockSpans = tracer.finishedSpans();
        assertThat(mockSpans.size(), is(1));

        MockSpan mockSpan = mockSpans.get(0);
        assertThat(mockSpan.operationName(), is("withEmptyArgs"));
    }

    @Test
    public void testNewSpanCreationWithOverrideOperationName() {

        // When
        new ClassWithNewSpanAnnotation().withOperationName();

        // Then
        List<MockSpan> mockSpans = tracer.finishedSpans();
        assertThat(mockSpans.size(), is(1));

        MockSpan mockSpan = mockSpans.get(0);
        assertThat(mockSpan.operationName(), is("newName"));
    }
}

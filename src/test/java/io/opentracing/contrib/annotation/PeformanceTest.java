/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.opentracing.contrib.annotation;

import io.opentracing.contrib.annotation.sample.ClassWithNewSpanAnnotation;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import javax.jms.Message;
import java.util.Date;

import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@ContextConfiguration(
        classes = {TestConfig.class, ClassWithNewSpanAnnotation.class}
)
public class PeformanceTest {

    @Mock
    private Message message;

    @Autowired
    private ClassWithNewSpanAnnotation classWithNewSpanAnnotation;

    @Test
    public void testWithNoArgs() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withEmptyArgs();
        }

        long end = new Date().getTime();
        System.out.println("total time taken testWithNoArgs :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testWithSpanArgs() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withSpanArgs(null);
        }

        long end = new Date().getTime();
        System.out.println("total time taken testWithSpanArgs :: " + ((end - start) / 1000.0) + " ms");
    }


    @Test
    public void testWithSpanArgsOnExtraLogic() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withExtraLogicOnSpanArgs(null);
        }

        long end = new Date().getTime();
        System.out.println("total time taken withExtraLogicOnSpanArgs :: " + ((end - start) / 1000.0) + " ms");
    }

    @Test
    public void testNewSpanCreation() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withEmptyArgs();
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreation :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testNewSpanCreationWithOverrideOperationName() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withOperationName();
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreation :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testNewSpanCreationWithTag() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withTag("tag-value");
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreationWithTag :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testNewSpanCreationWithAdvanceTag() throws Exception {

        // Given
        when(message.getJMSMessageID()).thenReturn("msg-id-sample");

        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            classWithNewSpanAnnotation.withAdvanceTag(message);
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreationWithAdvanceTag :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testNewSpanCreationWithAdvanceTagArgumentNotMatch() throws Exception {
        // Given
        long start = new Date().getTime();
        for (int i = 0; i < 1000; i++) {
            // When
            classWithNewSpanAnnotation.withAdvanceTagNotMatchedArgument("tony");
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreationWithAdvanceTagArgumentNotMatch :: " + ((end - start) / 1000.0) + " ms");

    }

    @Test
    public void testNewSpanCreationWithUnsupportedValueTag() {
        long start = new Date().getTime();

        for (int i = 0; i < 1000; i++) {
            // When
            classWithNewSpanAnnotation.withUnsupportedValueTag("tony".getBytes());
        }

        long end = new Date().getTime();
        System.out.println("total time taken testNewSpanCreationWithUnsupportedValueTag :: " + ((end - start) / 1000.0) + " ms");

    }
}
